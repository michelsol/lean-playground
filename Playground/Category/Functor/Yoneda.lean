import Playground.Category.Functor.Hom
import Playground.Category.Instances.MetaCat

namespace Category.Functor
section

  def yoneda (C) [Category C] : C ‚•§ C·µí·µñ ‚•§ Type _ := (hom C).swap.curry

  namespace yoneda
  -- define yoneda's lemma's pairing bifunctor: X, F ‚Ü¶ (hom(_,X) ‚üπ F)
  def pairing (C) [Category.{u,v} C] : Bi C·µí·µñ (C·µí·µñ ‚•§ Type v) (Type (max u v)) :=
    (yoneda C).opp.prod (ùü≠ (C·µí·µñ ‚•§ Type _)) ‚ãô hom (C·µí·µñ ‚•§ Type _)

  def evaluation.{u,v} (C) [Category.{u,v} C] : Bi C·µí·µñ (C·µí·µñ ‚•§ Type v) (Type (max u v)) :=
    Bi.evaluation C·µí·µñ (Type v) ‚ãô Functor.ulift.{v,u}

  -- This is yoneda's lemma stated compactly as an explicit natural isomorphism
  open Natural_Transformation in
  def isomorphism.{u,v} (C) [Category.{u,v} C] : pairing C ‚âÖ evaluation C := {
      hom := {
        component := Œª ‚ü®op U, P‚ü© => Œª (s : yoneda _ U ‚üπ P) => 
          show ULift $ P (op U) from
          ULift.up $ s (op U) (ùüô U)
        naturality := @Œª ‚ü®op U‚ÇÅ, P‚ÇÅ‚ü© ‚ü®op U‚ÇÇ, P‚ÇÇ‚ü© ‚ü®op f, Œ±‚ü© => by
          funext (s : _ ‚üπ P‚ÇÅ)
          apply congrArg ULift.up
          apply congrArg (Œ±.component (op U‚ÇÇ))
          show (s (op U‚ÇÇ) ((ùüô _ ‚â´ ùüô _) ‚â´ f)) = (s (op U‚ÇÅ) ‚â´ P‚ÇÅ.hom_map (op f)) (ùüô U‚ÇÅ)
          rw [‚Üês.naturality]
          show (s (op U‚ÇÇ) ((ùüô _ ‚â´ ùüô _) ‚â´ f)) = (s (op U‚ÇÇ) ((f ‚â´ ùüô _) ‚â´ ùüô _))
          simp
      }
      inv := {
        component := Œª ‚ü®op U, P‚ü© => Œª (‚ü®Œæ‚ü© : ULift $ P (op U)) => show yoneda _ U ‚üπ P from {
          component := Œª (op V) => Œª f => P.hom_map f.op Œæ
          naturality := @Œª (op V‚ÇÅ) (op V‚ÇÇ) (op g) => by
            funext (f : _ ‚ü∂ _)
            show P.hom_map ((g ‚â´ f) ‚â´ ùüô U).op Œæ = (P.hom_map f.op ‚â´ P.hom_map g.op) Œæ
            apply congrFun
            simp
        }
        naturality := @Œª ‚ü®op U‚ÇÅ, P‚ÇÅ‚ü© ‚ü®op U‚ÇÇ, P‚ÇÇ‚ü© ‚ü®op f, (Œ± : _ ‚üπ _)‚ü© => by
          funext ‚ü®Œæ‚ü©
          apply eq_of_component_eq
          funext (op V)
          funext g
          show (P‚ÇÅ.hom_map f.op ‚â´ (Œ± (op U‚ÇÇ) ‚â´ P‚ÇÇ.hom_map g.op)) Œæ
            = (P‚ÇÅ.hom_map (f.op ‚â´ (ùüô _ ‚â´ g).op) ‚â´ Œ± (op V)) Œæ
          rw [‚ÜêŒ±.naturality]
          simp
          rfl
      }
      inv_hom := by
        apply eq_of_component_eq
        funext ‚ü®op U, P‚ü©
        funext (‚ü®Œæ‚ü© : ULift $ P (op U))
        apply congrArg ULift.up
        show (P.hom_map (ùüô _) Œæ) = Œæ
        rw [hom_map_id]
        rfl
      hom_inv := by
        apply eq_of_component_eq
        funext ‚ü®op U, P‚ü©
        funext (s : yoneda _ U ‚üπ P)
        apply eq_of_component_eq
        funext (op V)
        funext (f : _ ‚ü∂ _)
        show (s (op U) ‚â´ P.hom_map f.op) (ùüô U) = s (op V) f
        rw [‚Üênaturality]
        show ((yoneda _ U).hom_map f.op ‚â´ s (op V)) (ùüô U) = s (op V) f
        apply congrArg (s (op V))
        show _ ‚â´ ùüô U = f
        simp
    }

  open Natural_Transformation in
  theorem hom_map_eq_isomorphism_inv_component {C} [Category C] (U V : C)
    : (yoneda C).hom_map = ((isomorphism C).inv.component (op U, yoneda C V)) ‚àò ULift.up := by
    funext _
    apply eq_of_component_eq
    funext _ _
    show (ùüô _ ‚â´ _) ‚â´ _ = _ ‚â´ ùüô _
    simp

  def isomorphismAt.{u,v} {C} [Category.{u,v} C] (U : C) (P : C·µí·µñ ‚•§ Type v) 
    : (yoneda C U ‚üπ P) ‚âÖ (ULift.{u,v} $ P (op U)) :=
      isom_images_of_isom_functors (isomorphism C) (op U, P)

  theorem isomorphism_inv_at_eq_isomorphismAt_inv.{u,v} {C} [Category.{u,v} C] (U : C) (P : C·µí·µñ ‚•§ Type v)
    : (isomorphism C).inv.component (op U, P) = (isomorphismAt U P).inv := by
    simp [isom_images_of_isom_functors, isomorphismAt, isom_images_of_isom_objects]
    simp [Bi.fixLeft, Bi.evaluation, Bi.swap]
    simp [uncurry]
    rfl

  theorem faithful {C} [Category C] : (yoneda C).Faithful := by
    intro U V
    rw [hom_map_eq_isomorphism_inv_component]
    rw [isomorphism_inv_at_eq_isomorphismAt_inv]
    apply flip Function.Injective.comp (Œª _ _ => congrArg ULift.down)
    have : ‚àÄ x, ((isomorphismAt ..).hom ‚àò (isomorphismAt ..).inv) x = x := congrFun (isomorphismAt U (yoneda C V)).inv_hom
    exact Function.LeftInverse.injective this

  theorem full {C} [Category C] : (yoneda C).Full := by
    intro U V
    rw [hom_map_eq_isomorphism_inv_component]
    rw [isomorphism_inv_at_eq_isomorphismAt_inv]
    apply flip Function.Surjective.comp (Œª ‚ü®y‚ü© => ‚ü®y, rfl‚ü©)
    exact Function.RightInverse.surjective <| congrFun <| (isomorphismAt U (yoneda C V)).hom_inv


  -- yoneda corollary 2: structure of arrows to U is same as structure of arrows to V iff U is same as V
  theorem isomorphism_of_yoneda_isomorphism {C} [Category C] (U V : C) 
    : yoneda C U ‚âÖ yoneda C V ‚Üí U ‚âÖ V := 
    (yoneda C).isom_objects_of_isom_images_of_FullFaithful full faithful

  end yoneda

end
end Category.Functor