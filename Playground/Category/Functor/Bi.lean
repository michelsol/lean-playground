import Playground.Category.Instances.Set
import Playground.Category.Instances.Product
import Playground.Category.Functor.Category

namespace Category.Functor

section
  open Natural_Transformation

  section
    abbrev Bi (C D E) [Category C] [Category D] [Category E] := (C √ó D) ‚•§ E
  end
  
  namespace Bi
  section

    def swap {C D E} [Category C] [Category D] [Category E]
      (F : Bi C D E) : Bi D C E where
      obj_map := Œª ‚ü®Y, X‚ü© => F ‚ü®X, Y‚ü©
      hom_map := Œª ‚ü®g, f‚ü© => F.hom_map ‚ü®f, g‚ü©
      hom_map_comp := Œª ‚ü®g‚ÇÅ, f‚ÇÅ‚ü© ‚ü®g‚ÇÇ, f‚ÇÇ‚ü© => by
        show F.hom_map (_, _ ‚â´ _) = F.hom_map _ ‚â´ F.hom_map _ 
        rw [‚Üêhom_map_comp]
        show F.hom_map (_, _ ‚â´ _) = F.hom_map ((_ ‚â´ _), (_ ‚â´ _))
        simp
      hom_map_id := Œª Y => by
        show F.hom_map (ùüô _) = ùüô _ 
        simp

    def fixLeft {C D E} [Category C] [Category D] [Category E]
      (F : Bi C D E) (X : C) : D ‚•§ E where
      obj_map := Œª Y => F ‚ü®X, Y‚ü©
      hom_map := @Œª Y‚ÇÅ Y‚ÇÇ g => 
        show F ‚ü®X, Y‚ÇÅ‚ü© ‚ü∂ F ‚ü®X, Y‚ÇÇ‚ü© from
        F.hom_map ‚ü®ùüô _, g‚ü©
      hom_map_comp := Œª {Y‚ÇÅ Y‚ÇÇ Y‚ÇÉ} g‚ÇÅ g‚ÇÇ => by
        show F.hom_map (_, _ ‚â´ _) = F.hom_map _ ‚â´ F.hom_map _ 
        rw [‚Üêhom_map_comp]
        show F.hom_map (_, _ ‚â´ _) = F.hom_map ((_ ‚â´ _), (_ ‚â´ _))
        simp
      hom_map_id := Œª Y => by
        show F.hom_map (ùüô _) = ùüô _ 
        simp

    def fixRight {C D E} [Category C] [Category D] [Category E]
      (F : Bi C D E) (Y : D) : C ‚•§ E := F.swap.fixLeft Y

    def curry {C D E} [Category C] [Category D] [Category E]
      (F : Bi C D E) : C ‚•§ D ‚•§ E where
      obj_map := F.fixLeft
      hom_map {X‚ÇÅ X‚ÇÇ} f := {
        component := Œª Y => F.hom_map (f, ùüô Y)
        naturality := Œª {Y‚ÇÅ Y‚ÇÇ} g => by
          show F.hom_map _ ‚â´ F.hom_map _ = F.hom_map _ ‚â´ F.hom_map _
          rw [‚Üêhom_map_comp, ‚Üêhom_map_comp]
          apply congrArg F.hom_map
          show (_ ‚â´ _, _ ‚â´ _) = (_ ‚â´ _, _ ‚â´ _)
          simp
      }
      hom_map_comp {X‚ÇÅ X‚ÇÇ X‚ÇÉ} f‚ÇÅ f‚ÇÇ := by
        apply eq_of_component_eq
        funext Y
        show F.hom_map _ = F.hom_map _ ‚â´ F.hom_map _
        rw [‚Üêhom_map_comp]
        apply congrArg F.hom_map
        show _ = (_ ‚â´ _, _ ‚â´ _)
        simp
      hom_map_id X := by
        apply eq_of_component_eq
        funext Y
        show F.hom_map (ùüô _) = ùüô _ 
        simp
  end
  end Bi

  section
    def asLHSofBi {C D E} [Category C] [Category D] [Category E]
      (F : C ‚•§ E) : Bi C D E where
      obj_map := Œª ‚ü®X, _‚ü© => F X
      hom_map := Œª ‚ü®f, _‚ü© => F.hom_map f
      hom_map_comp _ _ := by simp
      hom_map_id _ := by simp

    def asRHSofBi {C D E} [Category C] [Category D] [Category E]
      (F : D ‚•§ E) : Bi C D E where
      obj_map := Œª ‚ü®_, Y‚ü© => F Y
      hom_map := Œª ‚ü®_, f‚ü© => F.hom_map f
      hom_map_comp _ _ := by simp
      hom_map_id _ := by simp

    def pack {C D‚ÇÅ D‚ÇÇ} [Category C] [Category D‚ÇÅ] [Category D‚ÇÇ] 
      (F‚ÇÅ : C ‚•§ D‚ÇÅ) (F‚ÇÇ : C ‚•§ D‚ÇÇ) : C ‚•§ D‚ÇÅ √ó D‚ÇÇ where
      obj_map X := ‚ü®F‚ÇÅ X, F‚ÇÇ X‚ü©
      hom_map f := ‚ü®F‚ÇÅ.hom_map f, F‚ÇÇ.hom_map f‚ü©
      hom_map_comp f g := by simp; rfl
      hom_map_id X := by simp; rfl

    def prod {C D E‚ÇÅ E‚ÇÇ} [Category C] [Category D] [Category E‚ÇÅ] [Category E‚ÇÇ]
      (F‚ÇÅ : C ‚•§ E‚ÇÅ) (F‚ÇÇ : D ‚•§ E‚ÇÇ) : Bi C D (E‚ÇÅ √ó E‚ÇÇ) :=
      F‚ÇÅ.asLHSofBi.pack F‚ÇÇ.asRHSofBi
  end

  section
    def fixLeft {C D E} [Category C] [Category D] [Category E]
      (F : C ‚•§ D ‚•§ E) (X : C) : D ‚•§ E := F X

    def fixRight {C D E} [Category C] [Category D] [Category E]
      (F : C ‚•§ D ‚•§ E) (Y : D) : C ‚•§ E where
      obj_map := Œª X => F X Y
      hom_map := Œª {X‚ÇÅ X‚ÇÇ} f => (F.hom_map f).component Y
      hom_map_comp := by simp
      hom_map_id X := by simp; rfl

    def uncurry {C D E} [Category C] [Category D] [Category E]
      (F : C ‚•§ D ‚•§ E) : Bi C D E where
      obj_map := Œª ‚ü®X, Y‚ü© => F X Y
      hom_map := @Œª ‚ü®X‚ÇÅ, Y‚ÇÅ‚ü© ‚ü®X‚ÇÇ, Y‚ÇÇ‚ü© ‚ü®f, g‚ü© => 
        show F X‚ÇÅ Y‚ÇÅ ‚ü∂ F X‚ÇÇ Y‚ÇÇ from
        (F X‚ÇÅ).hom_map g ‚â´ (F.fixRight Y‚ÇÇ).hom_map f
      hom_map_comp := @Œª ‚ü®X‚ÇÅ, Y‚ÇÅ‚ü© ‚ü®X‚ÇÇ, Y‚ÇÇ‚ü© ‚ü®X‚ÇÉ, Y‚ÇÉ‚ü© ‚ü®f‚ÇÅ, g‚ÇÅ‚ü© ‚ü®f‚ÇÇ, g‚ÇÇ‚ü© => by
        simp [fixRight]
        rw [assoc ((F X‚ÇÅ).hom_map g‚ÇÅ), ‚Üêassoc ((F X‚ÇÅ).hom_map g‚ÇÇ)]
        rw [naturality, assoc, assoc]
      hom_map_id _ := by simp; rfl

    def swap {C D E} [Category C] [Category D] [Category E]
      (F : C ‚•§ D ‚•§ E) : D ‚•§ C ‚•§ E := F.uncurry.swap.curry
  end

  section
    namespace Bi
    -- define the evaluation bifunctor : X, F ‚Ü¶ F X
    def evaluation (C D) [Category C] [Category D] : Bi C (C ‚•§ D) D :=
      (ùü≠ (C ‚•§ D)).uncurry.swap

    --
    -- def ofLeftAndRightFunctors {C D E} [Category C] [Category D] [Category E]
    --   (F : C ‚•§ E)
    --   : Bi C D E := sorry

    end Bi
  end

  section
    def isom_images_of_isom_functors {C D} [Category C] [Category D] {F G : C ‚•§ D} (Œ± : F ‚âÖ G) (X : C) 
      : F X ‚âÖ G X :=
      ((Bi.evaluation C D).fixLeft X).isom_images_of_isom_objects Œ±

    -- example {C D} [Category C] [Category D] {F G : C ‚•§ D} (h : ‚àÄ X, F X ‚âÖ G X) : F ‚âÖ G :=
    --   sorry

  end
end

end Category.Functor
