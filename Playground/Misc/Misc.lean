-- import Mathlib.Tactic.Linarith
-- import Mathlib.Algebra.Module.LinearMap
import Mathlib

-- un espace vectoriel admet une base

example (a : ‚Ñ§) (h1 : a ‚â• 3) : a ‚â• 1 := by
  -- linarith
  sorry


example (X) (s : Set X) : Type := s

example := OrderIso
example := Ordinal
-- example := Quotient

noncomputable def exp_series_term (n : ‚Ñï) (x : ‚ÑÇ) : ‚ÑÇ := x ^ n / n.factorial
open BigOperators Finset in
noncomputable def exp_series_partial_sum (N : ‚Ñï) (x : ‚ÑÇ) : ‚ÑÇ := ‚àë n in range N, exp_series_term n x


open Filter Topology in
theorem tendsto_const {Œ±} (x : Filter Œ±) [NeBot x]
  {Œ≤} [TopologicalSpace Œ≤] [T1Space Œ≤] (l : Œ≤)
   : Tendsto (Function.const Œ± l) x (ùìù l) := by
  rw [Tendsto, ‚ÜêFunction.const_def, Filter.map_const, pure_le_nhds_iff]

open Filter Topology in
theorem tendsto_one_sub_pos_div_one_sub_atTop_of_lt_one (r : ‚Ñù) (h‚ÇÅ : r ‚â• 0) (h‚ÇÇ : r < 1) 
  : Tendsto (Œª n : ‚Ñï => (1 - r ^ n) / (1 - r)) atTop (ùìù (1/(1 - r))) := by
  apply Filter.Tendsto.div _ _ (by linarith)
  . have : ùìù 1 = ùìù ((1 : ‚Ñù) - 0) := by congr; linarith
    rw [this]
    apply Filter.Tendsto.sub
    . apply tendsto_const
    -- . exact tendsto_pow_atTop_nhds_0_of_lt_1 h‚ÇÅ h‚ÇÇ
    . sorry
  . apply Filter.Tendsto.sub
    . apply tendsto_const
    . apply tendsto_const

def eq_of_mul_eq_of_ne_zero {a b c : ‚Ñù} (ha : a ‚â† 0) (h : b * a = c * a) : b = c := by
  rw [‚Üêmul_div_cancel b ha, ‚Üêmul_div_cancel c ha]
  congr


open BigOperators Finset in
def Finset.sum_range_pow_eq (n : ‚Ñï) (x : ‚Ñù) (hx : x ‚â† 1) : ‚àë k in range n, x ^ k = (1 - x ^ n) / (1 - x) := by
  induction n with
  | zero => simp_arith
  | succ n ih => 
    rw [sum_range_succ, ih]
    have : 1 - x ‚â† 0 := Œª c => hx $ by linarith
    apply eq_of_mul_eq_of_ne_zero this
    . rw [right_distrib, div_mul_cancel _ this, div_mul_cancel _ this, mul_sub_left_distrib]
      ring_nf
      sorry



example (x : ‚Ñù) : deriv (Œª t => t * t) x = 2 * x := by
rw [deriv_mul differentiableAt_id differentiableAt_id, 
    congrFun deriv_id'' x, one_mul, mul_one, two_mul]


local macro_rules | `($x ^ $y)   => `(HPow.hPow $x $y)
-- local macro_rules | `($x * $y)   => `(HMul.hMul $x $y)


theorem th (n : ‚Ñï) (x : ‚Ñù) : deriv (Œª t : ‚Ñù => t ^ (n + 1)) x = (n + 1 : ‚Ñï) * (x ^ n) := by
  induction n with
  | zero => 
    rw [Nat.zero_add, pow_zero, Nat.cast_one, one_mul]
    apply Eq.trans _ (deriv_id x)
    congr
    funext t
    rw [pow_one]
    rfl
  | succ n hn => 
    sorry


theorem t0 : ‚à´ x : ‚Ñù in Set.Icc 0 10, (1 : ‚Ñù) = 10 := by 
let f : ‚Ñù ‚Üí ‚Ñù := Œª _ => 1
show MeasureTheory.integral _ f = _
rw [MeasureTheory.integral_eq f _]
. 
  -- library_search
  sorry
. 
  exact MeasureTheory.integrable_const 1
-- #print t0



-- theorem aaa (n : ‚Ñï) : (n + (1 : ‚Ñù)) = ((Nat.add n 1) : ‚Ñù) := 
--   by
--   rw [‚ÜêNat.cast_one, ‚ÜêNat.cast_add]
-- #print aaa
-- theorem th1 (a : ‚Ñù) (n : ‚Ñï) : Real.rpow a n = Monoid.npow n a := by
-- rw [Real.rpow_nat_cast]
-- #print th1

example {Œ± Œ≤} (f : Œ± ‚Üí Œ≤) : Œ± ‚Üí Inhabited Œ≤ := Œª x => ‚ü®f x‚ü©

example {Œ± Œ≤} (g : Œ± ‚Üí Inhabited Œ≤) : Œ± ‚Üí Œ≤ := Œª x => (g x).default
