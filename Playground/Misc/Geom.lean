import Mathlib

namespace Geom
structure Point where
  x : ‚Ñù
  y : ‚Ñù

structure Vector where
  x : ‚Ñù
  y : ‚Ñù

def Point.add (u : Point) (v : Vector) : Point where
  x := u.x + v.x
  y := u.y + v.y
instance : HAdd Point Vector Point := ‚ü®Point.add‚ü©

def Point.sub (u v : Point) : Vector where
  x := u.x - v.x
  y := u.y - v.y
instance : HSub Point Point Vector := ‚ü®Point.sub‚ü©

def Vector.add (u v : Vector) : Vector where
  x := u.x + v.x
  y := u.y + v.y
instance : Add Vector := ‚ü®Vector.add‚ü©

def Vector.sub (u v : Vector) : Vector where
  x := u.x - v.x
  y := u.y - v.y
instance : Sub Vector := ‚ü®Vector.sub‚ü©

def Vector.norm2 (u : Vector) := u.x * u.x + u.y * u.y

def Point.distance (u v : Point) := (v - u).norm2

open NNReal

def circle (c : Point) (r : ‚Ñù‚â•0) := { x | c.distance x = r }
def unitCircle := circle ‚ü®0, 0‚ü© 0

open ENat

noncomputable
def arcLength {a b : ‚Ñù} (hab : a < b) (f : ‚Ñù ‚Üí ‚Ñù√ó‚Ñù) := ‚à´ t in Set.Icc a b, ‚Äñderiv f t‚Äñ

example (hab : a < b) : arcLength hab (Œª t => (t, t)) = 0 := by
  dsimp [arcLength]
  sorry


open Asymptotics
example (f : ‚Ñù ‚Üí ‚Ñù √ó ‚Ñù) (x : ‚Ñù) (hf : HasDerivAt f f' x) :
  HasDerivAt (fst ‚àò f) f'.1 x := by
  let ff' := ContinuousLinearMap.smulRight (1 : ‚Ñù ‚ÜíL[‚Ñù] ‚Ñù) f'
  have hf : HasFDerivAt f ff' x := hf.hasFDerivAt
  show HasFDerivAt ..
  dsimp [HasFDerivAt, HasFDerivAtFilter] at hf ‚ä¢
  rw [IsLittleO_def] at hf ‚ä¢
  simp only [IsBigOWith_def] at hf ‚ä¢
  intro Œµ hŒµ
  have hf := hf hŒµ
  dsimp [norm] at hf ‚ä¢
  sorry


example [Fintype I] [NontriviallyNormedField ùïú]
  [NormedAddCommGroup E] [NormedSpace ùïú E]
  [NormedAddCommGroup F] [NormedSpace ùïú F]
  (f : E ‚Üí I ‚Üí F) (f' : E ‚ÜíL[ùïú] I ‚Üí F) (x : E) (hf : HasFDerivAt f f' x) (i : I) :
  HasFDerivAt (f . i) ((ContinuousLinearMap.proj i).comp f') x := by
  dsimp [HasFDerivAt, HasFDerivAtFilter] at hf ‚ä¢
  rw [IsLittleO_def] at hf ‚ä¢
  simp only [IsBigOWith_def] at hf ‚ä¢
  intro Œµ hŒµ
  have hf := hf hŒµ
  dsimp [norm] at hf ‚ä¢
  sorry

end Geom
